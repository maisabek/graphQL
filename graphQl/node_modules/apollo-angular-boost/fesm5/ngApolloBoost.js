export { default as gql } from 'graphql-tag';
export * from 'apollo-client';
import { ApolloLink, Observable } from 'apollo-link';
export * from 'apollo-link';
import { InMemoryCache } from 'apollo-cache-inmemory';
export * from 'apollo-cache-inmemory';
export { InMemoryCache } from 'apollo-cache-inmemory';
import { Apollo, ApolloModule } from 'apollo-angular';
export * from 'apollo-angular';
import { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';
import { __assign, __decorate, __param } from 'tslib';
import { HttpLink, HttpLinkModule } from 'apollo-angular-link-http';
import { withClientState } from 'apollo-link-state';
import { onError } from 'apollo-link-error';

var APOLLO_BOOST_CONFIG = new InjectionToken('[apollo-angular-boost] config');

var ApolloBoost = /** @class */ (function () {
    function ApolloBoost(apollo, httpLink) {
        this.apollo = apollo;
        this.httpLink = httpLink;
    }
    ApolloBoost.prototype.create = function (config) {
        var cache = config && config.cacheRedirects
            ? new InMemoryCache({ cacheRedirects: config.cacheRedirects })
            : new InMemoryCache();
        var stateLink = config && config.clientState
            ? withClientState(__assign(__assign({}, config.clientState), { cache: cache }))
            : false;
        var errorLink = config && config.onError
            ? onError(config.onError)
            : onError(function (_a) {
                var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;
                if (graphQLErrors) {
                    graphQLErrors.map(function (_a) {
                        var message = _a.message, locations = _a.locations, path = _a.path;
                        // tslint:disable-next-line
                        return console.log("[GraphQL error]: Message: " + message + ", Location: " + locations + ", Path: " + path);
                    });
                }
                if (networkError) {
                    // tslint:disable-next-line
                    console.log("[Network error]: " + networkError);
                }
            });
        var requestHandler = config && config.request
            ? new ApolloLink(function (operation, forward) {
                return new Observable(function (observer) {
                    var handle;
                    Promise.resolve(operation)
                        .then(function (oper) { return config.request(oper); })
                        .then(function () {
                        handle = forward(operation).subscribe({
                            next: observer.next.bind(observer),
                            error: observer.error.bind(observer),
                            complete: observer.complete.bind(observer),
                        });
                    })
                        .catch(observer.error.bind(observer));
                    return function () {
                        if (handle) {
                            handle.unsubscribe();
                        }
                    };
                });
            })
            : false;
        var httpLink = this.httpLink.create(__assign(__assign({}, ((config && config.httpOptions) || {})), { uri: (config && config.uri) || '/graphql' }));
        var link = ApolloLink.from([
            errorLink,
            requestHandler,
            stateLink,
            httpLink,
        ].filter(function (x) { return !!x; }));
        this.apollo.create({
            link: link,
            cache: cache,
        });
    };
    ApolloBoost.ctorParameters = function () { return [
        { type: Apollo },
        { type: HttpLink }
    ]; };
    ApolloBoost = __decorate([
        Injectable()
    ], ApolloBoost);
    return ApolloBoost;
}());

var ApolloBoostModule = /** @class */ (function () {
    function ApolloBoostModule(boost, config) {
        if (config) {
            boost.create(config);
        }
    }
    ApolloBoostModule.ctorParameters = function () { return [
        { type: ApolloBoost },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_BOOST_CONFIG,] }] }
    ]; };
    ApolloBoostModule = __decorate([
        NgModule({
            imports: [ApolloModule, HttpLinkModule],
            providers: [ApolloBoost],
        }),
        __param(1, Optional()),
        __param(1, Inject(APOLLO_BOOST_CONFIG))
    ], ApolloBoostModule);
    return ApolloBoostModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { APOLLO_BOOST_CONFIG, ApolloBoost, ApolloBoostModule };
//# sourceMappingURL=ngApolloBoost.js.map
