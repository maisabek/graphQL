import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { ApolloLink, Observable } from 'apollo-link';
import { Apollo } from 'apollo-angular';
import { HttpLink } from 'apollo-angular-link-http';
import { withClientState } from 'apollo-link-state';
import { onError } from 'apollo-link-error';
import { InMemoryCache } from 'apollo-cache-inmemory';
let ApolloBoost = class ApolloBoost {
    constructor(apollo, httpLink) {
        this.apollo = apollo;
        this.httpLink = httpLink;
    }
    create(config) {
        const cache = config && config.cacheRedirects
            ? new InMemoryCache({ cacheRedirects: config.cacheRedirects })
            : new InMemoryCache();
        const stateLink = config && config.clientState
            ? withClientState(Object.assign(Object.assign({}, config.clientState), { cache }))
            : false;
        const errorLink = config && config.onError
            ? onError(config.onError)
            : onError(({ graphQLErrors, networkError }) => {
                if (graphQLErrors) {
                    graphQLErrors.map(({ message, locations, path }) => 
                    // tslint:disable-next-line
                    console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));
                }
                if (networkError) {
                    // tslint:disable-next-line
                    console.log(`[Network error]: ${networkError}`);
                }
            });
        const requestHandler = config && config.request
            ? new ApolloLink((operation, forward) => new Observable(observer => {
                let handle;
                Promise.resolve(operation)
                    .then(oper => config.request(oper))
                    .then(() => {
                    handle = forward(operation).subscribe({
                        next: observer.next.bind(observer),
                        error: observer.error.bind(observer),
                        complete: observer.complete.bind(observer),
                    });
                })
                    .catch(observer.error.bind(observer));
                return () => {
                    if (handle) {
                        handle.unsubscribe();
                    }
                };
            }))
            : false;
        const httpLink = this.httpLink.create(Object.assign(Object.assign({}, ((config && config.httpOptions) || {})), { uri: (config && config.uri) || '/graphql' }));
        const link = ApolloLink.from([
            errorLink,
            requestHandler,
            stateLink,
            httpLink,
        ].filter(x => !!x));
        this.apollo.create({
            link,
            cache,
        });
    }
};
ApolloBoost.ctorParameters = () => [
    { type: Apollo },
    { type: HttpLink }
];
ApolloBoost = __decorate([
    Injectable()
], ApolloBoost);
export { ApolloBoost };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBvbGxvQm9vc3QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci1ib29zdC8iLCJzb3VyY2VzIjpbIkFwb2xsb0Jvb3N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxVQUFVLEVBQUUsVUFBVSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDbEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFLcEQsSUFBYSxXQUFXLEdBQXhCLE1BQWEsV0FBVztJQUN0QixZQUFvQixNQUFjLEVBQVUsUUFBa0I7UUFBMUMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7SUFBRyxDQUFDO0lBRTNELE1BQU0sQ0FBQyxNQUFvQjtRQUNoQyxNQUFNLEtBQUssR0FDVCxNQUFNLElBQUksTUFBTSxDQUFDLGNBQWM7WUFDN0IsQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLEVBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxjQUFjLEVBQUMsQ0FBQztZQUM1RCxDQUFDLENBQUMsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUUxQixNQUFNLFNBQVMsR0FDYixNQUFNLElBQUksTUFBTSxDQUFDLFdBQVc7WUFDMUIsQ0FBQyxDQUFDLGVBQWUsaUNBQUssTUFBTSxDQUFDLFdBQVcsS0FBRSxLQUFLLElBQUU7WUFDakQsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUVaLE1BQU0sU0FBUyxHQUNiLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTztZQUN0QixDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDekIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsYUFBYSxFQUFFLFlBQVksRUFBQyxFQUFFLEVBQUU7Z0JBQ3hDLElBQUksYUFBYSxFQUFFO29CQUNqQixhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBQyxFQUFFLEVBQUU7b0JBQy9DLDJCQUEyQjtvQkFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FDVCw2QkFBNkIsT0FBTyxlQUFlLFNBQVMsV0FBVyxJQUFJLEVBQUUsQ0FDOUUsQ0FDRixDQUFDO2lCQUNIO2dCQUNELElBQUksWUFBWSxFQUFFO29CQUNoQiwyQkFBMkI7b0JBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLFlBQVksRUFBRSxDQUFDLENBQUM7aUJBQ2pEO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFVCxNQUFNLGNBQWMsR0FDbEIsTUFBTSxJQUFJLE1BQU0sQ0FBQyxPQUFPO1lBQ3RCLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FDWixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUNyQixJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDeEIsSUFBSSxNQUFXLENBQUM7Z0JBQ2hCLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO3FCQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUNsQyxJQUFJLENBQUMsR0FBRyxFQUFFO29CQUNULE1BQU0sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDO3dCQUNwQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO3dCQUNsQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO3dCQUNwQyxRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO3FCQUMzQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDO3FCQUNELEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUV4QyxPQUFPLEdBQUcsRUFBRTtvQkFDVixJQUFJLE1BQU0sRUFBRTt3QkFDVixNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7cUJBQ3RCO2dCQUNILENBQUMsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUNMO1lBQ0gsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUVaLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxpQ0FDaEMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQ3pDLEdBQUcsRUFBRSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksVUFBVSxJQUN6QyxDQUFDO1FBRUgsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztZQUMzQixTQUFTO1lBQ1QsY0FBYztZQUNkLFNBQVM7WUFDVCxRQUFRO1NBQ1QsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFpQixDQUFDLENBQUM7UUFFcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDakIsSUFBSTtZQUNKLEtBQUs7U0FDTixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQTs7WUExRTZCLE1BQU07WUFBb0IsUUFBUTs7QUFEbkQsV0FBVztJQUR2QixVQUFVLEVBQUU7R0FDQSxXQUFXLENBMkV2QjtTQTNFWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QXBvbGxvTGluaywgT2JzZXJ2YWJsZX0gZnJvbSAnYXBvbGxvLWxpbmsnO1xuaW1wb3J0IHtBcG9sbG99IGZyb20gJ2Fwb2xsby1hbmd1bGFyJztcbmltcG9ydCB7SHR0cExpbmt9IGZyb20gJ2Fwb2xsby1hbmd1bGFyLWxpbmstaHR0cCc7XG5pbXBvcnQge3dpdGhDbGllbnRTdGF0ZX0gZnJvbSAnYXBvbGxvLWxpbmstc3RhdGUnO1xuaW1wb3J0IHtvbkVycm9yfSBmcm9tICdhcG9sbG8tbGluay1lcnJvcic7XG5pbXBvcnQge0luTWVtb3J5Q2FjaGV9IGZyb20gJ2Fwb2xsby1jYWNoZS1pbm1lbW9yeSc7XG5cbmltcG9ydCB7UHJlc2V0Q29uZmlnfSBmcm9tICcuL3R5cGVzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwb2xsb0Jvb3N0IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhcG9sbG86IEFwb2xsbywgcHJpdmF0ZSBodHRwTGluazogSHR0cExpbmspIHt9XG5cbiAgcHVibGljIGNyZWF0ZShjb25maWc6IFByZXNldENvbmZpZykge1xuICAgIGNvbnN0IGNhY2hlID1cbiAgICAgIGNvbmZpZyAmJiBjb25maWcuY2FjaGVSZWRpcmVjdHNcbiAgICAgICAgPyBuZXcgSW5NZW1vcnlDYWNoZSh7Y2FjaGVSZWRpcmVjdHM6IGNvbmZpZy5jYWNoZVJlZGlyZWN0c30pXG4gICAgICAgIDogbmV3IEluTWVtb3J5Q2FjaGUoKTtcblxuICAgIGNvbnN0IHN0YXRlTGluayA9XG4gICAgICBjb25maWcgJiYgY29uZmlnLmNsaWVudFN0YXRlXG4gICAgICAgID8gd2l0aENsaWVudFN0YXRlKHsuLi5jb25maWcuY2xpZW50U3RhdGUsIGNhY2hlfSlcbiAgICAgICAgOiBmYWxzZTtcblxuICAgIGNvbnN0IGVycm9yTGluayA9XG4gICAgICBjb25maWcgJiYgY29uZmlnLm9uRXJyb3JcbiAgICAgICAgPyBvbkVycm9yKGNvbmZpZy5vbkVycm9yKVxuICAgICAgICA6IG9uRXJyb3IoKHtncmFwaFFMRXJyb3JzLCBuZXR3b3JrRXJyb3J9KSA9PiB7XG4gICAgICAgICAgICBpZiAoZ3JhcGhRTEVycm9ycykge1xuICAgICAgICAgICAgICBncmFwaFFMRXJyb3JzLm1hcCgoe21lc3NhZ2UsIGxvY2F0aW9ucywgcGF0aH0pID0+XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICBgW0dyYXBoUUwgZXJyb3JdOiBNZXNzYWdlOiAke21lc3NhZ2V9LCBMb2NhdGlvbjogJHtsb2NhdGlvbnN9LCBQYXRoOiAke3BhdGh9YCxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ldHdvcmtFcnJvcikge1xuICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtOZXR3b3JrIGVycm9yXTogJHtuZXR3b3JrRXJyb3J9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICBjb25zdCByZXF1ZXN0SGFuZGxlciA9XG4gICAgICBjb25maWcgJiYgY29uZmlnLnJlcXVlc3RcbiAgICAgICAgPyBuZXcgQXBvbGxvTGluayhcbiAgICAgICAgICAgIChvcGVyYXRpb24sIGZvcndhcmQpID0+XG4gICAgICAgICAgICAgIG5ldyBPYnNlcnZhYmxlKG9ic2VydmVyID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgaGFuZGxlOiBhbnk7XG4gICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKG9wZXJhdGlvbilcbiAgICAgICAgICAgICAgICAgIC50aGVuKG9wZXIgPT4gY29uZmlnLnJlcXVlc3Qob3BlcikpXG4gICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZSA9IGZvcndhcmQob3BlcmF0aW9uKS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IG9ic2VydmVyLm5leHQuYmluZChvYnNlcnZlciksXG4gICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBvYnNlcnZlci5jb21wbGV0ZS5iaW5kKG9ic2VydmVyKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgLmNhdGNoKG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgIClcbiAgICAgICAgOiBmYWxzZTtcblxuICAgIGNvbnN0IGh0dHBMaW5rID0gdGhpcy5odHRwTGluay5jcmVhdGUoe1xuICAgICAgLi4uKChjb25maWcgJiYgY29uZmlnLmh0dHBPcHRpb25zKSB8fCB7fSksXG4gICAgICB1cmk6IChjb25maWcgJiYgY29uZmlnLnVyaSkgfHwgJy9ncmFwaHFsJyxcbiAgICB9KTtcblxuICAgIGNvbnN0IGxpbmsgPSBBcG9sbG9MaW5rLmZyb20oW1xuICAgICAgZXJyb3JMaW5rLFxuICAgICAgcmVxdWVzdEhhbmRsZXIsXG4gICAgICBzdGF0ZUxpbmssXG4gICAgICBodHRwTGluayxcbiAgICBdLmZpbHRlcih4ID0+ICEheCkgYXMgQXBvbGxvTGlua1tdKTtcblxuICAgIHRoaXMuYXBvbGxvLmNyZWF0ZSh7XG4gICAgICBsaW5rLFxuICAgICAgY2FjaGUsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==