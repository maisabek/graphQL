import { __assign, __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { ApolloLink, Observable } from 'apollo-link';
import { Apollo } from 'apollo-angular';
import { HttpLink } from 'apollo-angular-link-http';
import { withClientState } from 'apollo-link-state';
import { onError } from 'apollo-link-error';
import { InMemoryCache } from 'apollo-cache-inmemory';
var ApolloBoost = /** @class */ (function () {
    function ApolloBoost(apollo, httpLink) {
        this.apollo = apollo;
        this.httpLink = httpLink;
    }
    ApolloBoost.prototype.create = function (config) {
        var cache = config && config.cacheRedirects
            ? new InMemoryCache({ cacheRedirects: config.cacheRedirects })
            : new InMemoryCache();
        var stateLink = config && config.clientState
            ? withClientState(__assign(__assign({}, config.clientState), { cache: cache }))
            : false;
        var errorLink = config && config.onError
            ? onError(config.onError)
            : onError(function (_a) {
                var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;
                if (graphQLErrors) {
                    graphQLErrors.map(function (_a) {
                        var message = _a.message, locations = _a.locations, path = _a.path;
                        // tslint:disable-next-line
                        return console.log("[GraphQL error]: Message: " + message + ", Location: " + locations + ", Path: " + path);
                    });
                }
                if (networkError) {
                    // tslint:disable-next-line
                    console.log("[Network error]: " + networkError);
                }
            });
        var requestHandler = config && config.request
            ? new ApolloLink(function (operation, forward) {
                return new Observable(function (observer) {
                    var handle;
                    Promise.resolve(operation)
                        .then(function (oper) { return config.request(oper); })
                        .then(function () {
                        handle = forward(operation).subscribe({
                            next: observer.next.bind(observer),
                            error: observer.error.bind(observer),
                            complete: observer.complete.bind(observer),
                        });
                    })
                        .catch(observer.error.bind(observer));
                    return function () {
                        if (handle) {
                            handle.unsubscribe();
                        }
                    };
                });
            })
            : false;
        var httpLink = this.httpLink.create(__assign(__assign({}, ((config && config.httpOptions) || {})), { uri: (config && config.uri) || '/graphql' }));
        var link = ApolloLink.from([
            errorLink,
            requestHandler,
            stateLink,
            httpLink,
        ].filter(function (x) { return !!x; }));
        this.apollo.create({
            link: link,
            cache: cache,
        });
    };
    ApolloBoost.ctorParameters = function () { return [
        { type: Apollo },
        { type: HttpLink }
    ]; };
    ApolloBoost = __decorate([
        Injectable()
    ], ApolloBoost);
    return ApolloBoost;
}());
export { ApolloBoost };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBvbGxvQm9vc3QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci1ib29zdC8iLCJzb3VyY2VzIjpbIkFwb2xsb0Jvb3N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxVQUFVLEVBQUUsVUFBVSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDbEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFLcEQ7SUFDRSxxQkFBb0IsTUFBYyxFQUFVLFFBQWtCO1FBQTFDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQUcsQ0FBQztJQUUzRCw0QkFBTSxHQUFiLFVBQWMsTUFBb0I7UUFDaEMsSUFBTSxLQUFLLEdBQ1QsTUFBTSxJQUFJLE1BQU0sQ0FBQyxjQUFjO1lBQzdCLENBQUMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxFQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsY0FBYyxFQUFDLENBQUM7WUFDNUQsQ0FBQyxDQUFDLElBQUksYUFBYSxFQUFFLENBQUM7UUFFMUIsSUFBTSxTQUFTLEdBQ2IsTUFBTSxJQUFJLE1BQU0sQ0FBQyxXQUFXO1lBQzFCLENBQUMsQ0FBQyxlQUFlLHVCQUFLLE1BQU0sQ0FBQyxXQUFXLEtBQUUsS0FBSyxPQUFBLElBQUU7WUFDakQsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUVaLElBQU0sU0FBUyxHQUNiLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTztZQUN0QixDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDekIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEVBQTZCO29CQUE1QixnQ0FBYSxFQUFFLDhCQUFZO2dCQUNuQyxJQUFJLGFBQWEsRUFBRTtvQkFDakIsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEVBQTBCOzRCQUF6QixvQkFBTyxFQUFFLHdCQUFTLEVBQUUsY0FBSTt3QkFDMUMsMkJBQTJCO3dCQUMzQixPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQ1QsK0JBQTZCLE9BQU8sb0JBQWUsU0FBUyxnQkFBVyxJQUFNLENBQzlFO29CQUZELENBRUMsQ0FDRixDQUFDO2lCQUNIO2dCQUNELElBQUksWUFBWSxFQUFFO29CQUNoQiwyQkFBMkI7b0JBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQW9CLFlBQWMsQ0FBQyxDQUFDO2lCQUNqRDtZQUNILENBQUMsQ0FBQyxDQUFDO1FBRVQsSUFBTSxjQUFjLEdBQ2xCLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTztZQUN0QixDQUFDLENBQUMsSUFBSSxVQUFVLENBQ1osVUFBQyxTQUFTLEVBQUUsT0FBTztnQkFDakIsT0FBQSxJQUFJLFVBQVUsQ0FBQyxVQUFBLFFBQVE7b0JBQ3JCLElBQUksTUFBVyxDQUFDO29CQUNoQixPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQzt5QkFDdkIsSUFBSSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBcEIsQ0FBb0IsQ0FBQzt5QkFDbEMsSUFBSSxDQUFDO3dCQUNKLE1BQU0sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDOzRCQUNwQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDOzRCQUNsQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDOzRCQUNwQyxRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO3lCQUMzQyxDQUFDLENBQUM7b0JBQ0wsQ0FBQyxDQUFDO3lCQUNELEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUV4QyxPQUFPO3dCQUNMLElBQUksTUFBTSxFQUFFOzRCQUNWLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQzt5QkFDdEI7b0JBQ0gsQ0FBQyxDQUFDO2dCQUNKLENBQUMsQ0FBQztZQWxCRixDQWtCRSxDQUNMO1lBQ0gsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUVaLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSx1QkFDaEMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQ3pDLEdBQUcsRUFBRSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksVUFBVSxJQUN6QyxDQUFDO1FBRUgsSUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztZQUMzQixTQUFTO1lBQ1QsY0FBYztZQUNkLFNBQVM7WUFDVCxRQUFRO1NBQ1QsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsQ0FBQyxFQUFILENBQUcsQ0FBaUIsQ0FBQyxDQUFDO1FBRXBDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ2pCLElBQUksTUFBQTtZQUNKLEtBQUssT0FBQTtTQUNOLENBQUMsQ0FBQztJQUNMLENBQUM7O2dCQXpFMkIsTUFBTTtnQkFBb0IsUUFBUTs7SUFEbkQsV0FBVztRQUR2QixVQUFVLEVBQUU7T0FDQSxXQUFXLENBMkV2QjtJQUFELGtCQUFDO0NBQUEsQUEzRUQsSUEyRUM7U0EzRVksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Fwb2xsb0xpbmssIE9ic2VydmFibGV9IGZyb20gJ2Fwb2xsby1saW5rJztcbmltcG9ydCB7QXBvbGxvfSBmcm9tICdhcG9sbG8tYW5ndWxhcic7XG5pbXBvcnQge0h0dHBMaW5rfSBmcm9tICdhcG9sbG8tYW5ndWxhci1saW5rLWh0dHAnO1xuaW1wb3J0IHt3aXRoQ2xpZW50U3RhdGV9IGZyb20gJ2Fwb2xsby1saW5rLXN0YXRlJztcbmltcG9ydCB7b25FcnJvcn0gZnJvbSAnYXBvbGxvLWxpbmstZXJyb3InO1xuaW1wb3J0IHtJbk1lbW9yeUNhY2hlfSBmcm9tICdhcG9sbG8tY2FjaGUtaW5tZW1vcnknO1xuXG5pbXBvcnQge1ByZXNldENvbmZpZ30gZnJvbSAnLi90eXBlcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBcG9sbG9Cb29zdCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBvbGxvOiBBcG9sbG8sIHByaXZhdGUgaHR0cExpbms6IEh0dHBMaW5rKSB7fVxuXG4gIHB1YmxpYyBjcmVhdGUoY29uZmlnOiBQcmVzZXRDb25maWcpIHtcbiAgICBjb25zdCBjYWNoZSA9XG4gICAgICBjb25maWcgJiYgY29uZmlnLmNhY2hlUmVkaXJlY3RzXG4gICAgICAgID8gbmV3IEluTWVtb3J5Q2FjaGUoe2NhY2hlUmVkaXJlY3RzOiBjb25maWcuY2FjaGVSZWRpcmVjdHN9KVxuICAgICAgICA6IG5ldyBJbk1lbW9yeUNhY2hlKCk7XG5cbiAgICBjb25zdCBzdGF0ZUxpbmsgPVxuICAgICAgY29uZmlnICYmIGNvbmZpZy5jbGllbnRTdGF0ZVxuICAgICAgICA/IHdpdGhDbGllbnRTdGF0ZSh7Li4uY29uZmlnLmNsaWVudFN0YXRlLCBjYWNoZX0pXG4gICAgICAgIDogZmFsc2U7XG5cbiAgICBjb25zdCBlcnJvckxpbmsgPVxuICAgICAgY29uZmlnICYmIGNvbmZpZy5vbkVycm9yXG4gICAgICAgID8gb25FcnJvcihjb25maWcub25FcnJvcilcbiAgICAgICAgOiBvbkVycm9yKCh7Z3JhcGhRTEVycm9ycywgbmV0d29ya0Vycm9yfSkgPT4ge1xuICAgICAgICAgICAgaWYgKGdyYXBoUUxFcnJvcnMpIHtcbiAgICAgICAgICAgICAgZ3JhcGhRTEVycm9ycy5tYXAoKHttZXNzYWdlLCBsb2NhdGlvbnMsIHBhdGh9KSA9PlxuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgICAgYFtHcmFwaFFMIGVycm9yXTogTWVzc2FnZTogJHttZXNzYWdlfSwgTG9jYXRpb246ICR7bG9jYXRpb25zfSwgUGF0aDogJHtwYXRofWAsXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXR3b3JrRXJyb3IpIHtcbiAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbTmV0d29yayBlcnJvcl06ICR7bmV0d29ya0Vycm9yfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgY29uc3QgcmVxdWVzdEhhbmRsZXIgPVxuICAgICAgY29uZmlnICYmIGNvbmZpZy5yZXF1ZXN0XG4gICAgICAgID8gbmV3IEFwb2xsb0xpbmsoXG4gICAgICAgICAgICAob3BlcmF0aW9uLCBmb3J3YXJkKSA9PlxuICAgICAgICAgICAgICBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGhhbmRsZTogYW55O1xuICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShvcGVyYXRpb24pXG4gICAgICAgICAgICAgICAgICAudGhlbihvcGVyID0+IGNvbmZpZy5yZXF1ZXN0KG9wZXIpKVxuICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUgPSBmb3J3YXJkKG9wZXJhdGlvbikuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICAgICAgICBuZXh0OiBvYnNlcnZlci5uZXh0LmJpbmQob2JzZXJ2ZXIpLFxuICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBvYnNlcnZlci5lcnJvci5iaW5kKG9ic2VydmVyKSxcbiAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogb2JzZXJ2ZXIuY29tcGxldGUuYmluZChvYnNlcnZlciksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIC5jYXRjaChvYnNlcnZlci5lcnJvci5iaW5kKG9ic2VydmVyKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZSkge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICApXG4gICAgICAgIDogZmFsc2U7XG5cbiAgICBjb25zdCBodHRwTGluayA9IHRoaXMuaHR0cExpbmsuY3JlYXRlKHtcbiAgICAgIC4uLigoY29uZmlnICYmIGNvbmZpZy5odHRwT3B0aW9ucykgfHwge30pLFxuICAgICAgdXJpOiAoY29uZmlnICYmIGNvbmZpZy51cmkpIHx8ICcvZ3JhcGhxbCcsXG4gICAgfSk7XG5cbiAgICBjb25zdCBsaW5rID0gQXBvbGxvTGluay5mcm9tKFtcbiAgICAgIGVycm9yTGluayxcbiAgICAgIHJlcXVlc3RIYW5kbGVyLFxuICAgICAgc3RhdGVMaW5rLFxuICAgICAgaHR0cExpbmssXG4gICAgXS5maWx0ZXIoeCA9PiAhIXgpIGFzIEFwb2xsb0xpbmtbXSk7XG5cbiAgICB0aGlzLmFwb2xsby5jcmVhdGUoe1xuICAgICAgbGluayxcbiAgICAgIGNhY2hlLFxuICAgIH0pO1xuICB9XG59XG4iXX0=